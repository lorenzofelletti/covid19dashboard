{"version":3,"sources":["components/Globalstyle.js","components/Themes.js","components/CustomLineChart.jsx","components/Loading.jsx","components/Historical.jsx","components/Daily.jsx","components/Dashboard.jsx","components/About.jsx","components/NavigationBar.jsx","App.js","components/useDarkMode.js","reportWebVitals.js","index.js"],"names":["GlobalStyles","createGlobalStyle","theme","body","text","lightTheme","toggleBorder","backround","darkTheme","categoryColor","cases","deaths","recovered","CustomLineCharts","props","countryData","data","width","height","margin","left","right","formatter","value","Intl","NumberFormat","format","dataKey","allowDuplicatedCategory","type","tickFormatter","map","c","name","dot","stroke","Loading","Alert","variant","Heading","Historical","useState","country","setCountry","isLoaded","setIsLoaded","undefined","setCountryData","useEffect","fetch","headers","then","res","json","result","timeline","countryDataFormatted","Object","entries","category","values","cat","date","number","push","console","error","e","fetchCountryData","CustomLineChart","React","memo","Daily","forEach","elem","prev","curr","dataCases","dataDeaths","dataRecovered","dataFinal","i","length","datum","fill","defaultCountry","Dashboard","countries","setCountries","tabsClassName","tabClassName","sort","log","d","Form","className","Group","as","Row","controlId","Label","column","sm","Col","Control","custom","defaultValue","onChange","target","style","backgroundColor","color","borderColor","Tabs","defaultActiveKey","id","Tab","eventKey","title","About","href","NavigationBar","basename","toggleTheme","Navbar","collapseOnSelect","sticky","expand","bg","Brand","src","alt","Toggle","aria-controls","Collapse","Nav","Link","inline","Button","onClick","BASENAME","App","setTheme","mountedComponent","setMountedComponent","setMode","mode","window","localStorage","setItem","localTheme","getItem","useDarkMode","themeToggler","Container","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fc5fa671.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyles = createGlobalStyle`\n  body {\n    background: ${({ theme }) => theme.body};\n    color: ${({ theme }) => theme.text};\n  }\n  `;\n\n/* font-family: Tahoma, Helvetica, Arial, Roboto, sans-serif;\n * transition: all 0.50s linear;\n */\n","export const lightTheme = {\n  body: \"#FFF\",\n  text: \"#101010\",\n  toggleBorder: \"#FFF\",\n  backround: \"#363537\",\n};\n\nexport const darkTheme = {\n  body: \"#121212\", //'#363537',\n  text: \"#FAFAFA\",\n  toggleBorder: \"#6B8096\",\n  backround: \"#363537\",\n};\n","import React from 'react';\nimport { LineChart, ResponsiveContainer, XAxis, YAxis, Tooltip, Line, Legend } from 'recharts';\n\nconst categoryColor = {\n  cases: \"#FF0000\",\n  deaths: \"#252525\",\n  recovered: \"#62FF00\"\n}\n\nfunction CustomLineCharts(props) {\n  const countryData = props.data;\n  return (\n    <ResponsiveContainer width='100%' height={500} >\n      <LineChart margin={{ left: 25, right: 4 }}>\n        <Tooltip formatter={(value) => new Intl.NumberFormat('it').format(value)} />\n        <XAxis dataKey=\"date\" allowDuplicatedCategory={false}></XAxis>\n        <YAxis type=\"number\" dataKey=\"number\" tickFormatter={(value) => new Intl.NumberFormat('en').format(value)} ></YAxis>\n        <Legend />\n        {countryData && countryData.map(c => (\n          <Line type='monotone' dataKey=\"number\" data={c.data} name={c.name} key={c.name} dot={false} stroke={categoryColor[c.name]} />\n        ))}\n      </LineChart>\n    </ResponsiveContainer>\n  )\n}\n\nexport default CustomLineCharts;","import React from 'react';\nimport { Alert } from 'react-bootstrap';\n\nexport const Loading = () => (\n  <>\n    <Alert variant=\"light\">\n      <Alert.Heading>I'm loading the data</Alert.Heading>\n      <p>Please be patient...</p>\n    </Alert>\n  </>\n)\n\nexport default Loading;\n","import React, { useState, useEffect } from 'react';\n\nimport CustomLineCharts from './CustomLineChart';\nimport './Dashboard.css';\nimport { Loading } from \"./Loading\";\n\nconst BASE_URL = 'https://disease.sh';\nconst days = 'all';\n\n\nfunction Historical(props) {\n  const [country, setCountry] = useState(props.country);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [countryData, setCountryData] = useState(undefined);\n\n  function fetchCountryData(country) {\n    if (!country) return;\n    fetch(`${BASE_URL}/v3/covid-19/historical/${country}?lastdays=${days}`, {\n      headers: {\n        'accept': 'application/json'\n      }\n    })\n      .then(res => res.json())\n      .then(\n        (result) => {\n          if (result.timeline &&\n            result.timeline.cases &&\n            result.timeline.deaths &&\n            result.timeline.recovered) {\n\n            let countryDataFormatted = [];\n            for (let [category, values] of Object.entries(result.timeline)) {\n              let cat = { name: category, data: [] };\n              for (let [date, number] of Object.entries(values)) {\n                cat.data.push({\n                  date: date,\n                  number: number\n                });\n              }\n              countryDataFormatted.push(cat);\n            }\n            setIsLoaded(true);\n            setCountryData(countryDataFormatted);\n          }\n          else {\n            console.error(\"Bad format response.\");\n          }\n        },\n        (e) => {\n          console.error(e);\n        }\n      )\n  }\n\n  useEffect(() => {\n    if (props.country !== country) {\n      setCountry(props.country);\n      setIsLoaded(false);\n    }\n    if (!isLoaded) fetchCountryData(props.country);\n  }, [isLoaded, country, props.country])\n\n\n  if (!isLoaded || !countryData) {\n    return (\n      <>\n        <Loading />\n      </>\n    )\n  } else {\n    return (\n      <>\n        <h1>Cumulative Cases</h1>\n        <CustomLineCharts data={countryData} />\n      </>\n    );\n  }\n}\n\nexport default React.memo(Historical);\n","import React, { useState, useEffect } from 'react';\nimport { BarChart, ResponsiveContainer, XAxis, YAxis, Tooltip, Bar, Legend, Brush } from 'recharts';\nimport './Dashboard.css';\nimport { Loading } from \"./Loading\";\nimport { darkTheme } from './Themes';\n\nconst BASE_URL = 'https://disease.sh';\nconst days = 'all';\n\nconst categoryColor = {\n  cases: \"#FF0000\",\n  deaths: \"#252525\",\n  recovered: \"#62FF00\"\n}\n\nfunction Daily(props) {\n  const [country, setCountry] = useState(props.country);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [countryData, setCountryData] = useState(undefined);\n\n  function fetchCountryData(country) {\n    setIsLoaded(true);\n    fetch(`${BASE_URL}/v3/covid-19/historical/${country}?lastdays=${days}`, {\n      headers: {\n        'accept': 'application/json'\n      }\n    })\n      .then(res => res.json())\n      .then(\n        (result) => {\n          if (result.timeline &&\n            result.timeline.cases &&\n            result.timeline.deaths &&\n            result.timeline.recovered) {\n\n            let countryDataFormatted = [];\n            for (let [category, values] of Object.entries(result.timeline)) {\n              let cat = { name: category, data: [] };\n              for (let [date, number] of Object.entries(values)) {\n                cat.data.push({\n                  date: date,\n                  number: number\n                });\n              }\n              countryDataFormatted.push(cat);\n            }\n\n            countryDataFormatted.forEach(elem => {\n              let prev = 0;\n              let curr = 0;\n              for (let e of elem.data) {\n                curr = e.number;\n                e.number = (e.number - prev > 0) ? e.number - prev : 0;\n                prev = curr;\n              }\n            });\n            let dataCases = countryDataFormatted[0].data;\n            let dataDeaths = countryDataFormatted[1].data;\n            let dataRecovered = countryDataFormatted[2].data;\n            let dataFinal = [];\n            for (let i = 0; i < dataCases.length && dataRecovered.length && dataDeaths.length; i++) {\n              let datum = { date: dataCases[i].date };\n              datum.cases = dataCases[i].number;\n              datum.recovered = dataRecovered[i].number;\n              datum.deaths = dataDeaths[i].number;\n              dataFinal.push(datum);\n            }\n            countryDataFormatted = dataFinal;\n            setCountryData(countryDataFormatted);\n          }\n          else {\n            console.error(\"Bad format response.\");\n          }\n        },\n        (e) => {\n          console.error(e);\n        }\n      )\n  }\n\n\n  useEffect(() => {\n    if (props.country !== country) {\n      setCountry(props.country);\n      setIsLoaded(false);\n    }\n    if (!isLoaded) fetchCountryData(props.country);\n  }, [isLoaded, country, props.country])\n\n\n  if (!isLoaded || !countryData) {\n    return (\n      <>\n        <Loading />\n      </>\n    )\n  } else {\n    return (\n      <>\n        <h1>Daily Cases</h1>\n        <ResponsiveContainer width='100%' height={500} >\n          <BarChart margin={{ left: 25, right: 4 }} data={countryData}>\n            <Tooltip formatter={(value) => new Intl.NumberFormat('it').format(value)} />\n            <XAxis dataKey=\"date\"></XAxis>\n            <YAxis type=\"number\" tickFormatter={(value) => new Intl.NumberFormat('en').format(value)} ></YAxis>\n            <Legend />\n            <Brush dataKey=\"date\" stroke={props.theme === \"dark\" ? darkTheme.text : \"\"} fill={props.theme === \"dark\" ? darkTheme.backround : \"#fff\"} />\n            <Bar dataKey=\"cases\" name={'cases'} key={'cases'} fill={categoryColor['cases']} />\n            <Bar dataKey=\"deaths\" name={'deaths'} key={'deaths'} fill={categoryColor['deaths']} />\n            <Bar dataKey=\"recovered\" name={'recovered'} key={'recovered'} fill={categoryColor['recovered']} />\n          </BarChart>\n        </ResponsiveContainer>\n      </>\n    );\n  }\n}\n\nexport default React.memo(Daily);\n","import React, { useEffect, useState } from 'react';\nimport { Tabs, Tab } from 'react-bootstrap';\nimport './Dashboard.css';\nimport Historical from './Historical';\nimport Daily from './Daily';\nimport { lightTheme, darkTheme } from './Themes';\nimport { Form, Col } from 'react-bootstrap';\nimport Loading from './Loading';\n\nconst BASE_URL = 'https://disease.sh';\nconst defaultCountry = 'Italy';\n\nfunction Dashboard(props) {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [countries, setCountries] = useState();\n  const [country, setCountry] = useState(defaultCountry);\n\n  let tabsClassName = 'mt-3 ';\n  let tabClassName = '';\n  if (props.theme === 'dark') {\n    tabsClassName += 'dark-tabs';\n    tabClassName += 'dark-tab ';\n  }\n\n  function fetchCountries(sort) {\n    setIsLoaded(true);\n    fetch(`${BASE_URL}/v3/covid-19/countries${sort && '?sort=' + sort}`, {\n      headers: {\n        'accept': 'application/json',\n      }\n    })\n      .then(res => res.json())\n      .then(\n        (result) => {\n          let countries = { countries: [] };\n          result.forEach(d => {\n            countries.countries.push(d.country);\n          });\n          setCountries(countries);\n          setCountry(countries[0]);\n        },\n        (e) => {\n          console.error(e);\n        }\n      )\n  }\n\n  useEffect(() => {\n    console.log(isLoaded);\n    if (!isLoaded) fetchCountries('cases');\n  }, [isLoaded, country]);\n\n  if (countries) {\n    console.log(country);\n    return (\n      <>\n        <>\n          <style type=\"text/css\">\n            {`\n            .dark-tabs {\n              background-color: ${darkTheme.backround};\n              color: ${darkTheme.text};\n              border-radius: .25rem;\n              border-color: gray;\n            }\n  \n            .dark-tab {\n              border-radius: .25rem;\n            }\n            .dark-tab, .nav-link.active {\n              color: ${darkTheme.text};\n              \n            }\n  \n            a {\n              color: ${props.theme === 'dark' ? darkTheme.text : lightTheme.text}\n            }\n            a:hover {\n              color: ${props.theme === 'dark' ? darkTheme.text : lightTheme.text}\n            }\n  \n            .nav-tabs .nav-item.show .nav-link, .nav-tabs .nav-link.active {\n              border-radius: 0.25rem;\n            }\n            `}\n          </style>\n        </>\n        <Form className='mt-3'>\n          <Form.Group as={Form.Row} controlId=\"country\">\n            <Form.Label column sm={4} >Selected Country</Form.Label>\n            <Col sm={6}>\n              <Form.Control\n                as=\"select\"\n                custom\n                value={country}\n                defaultValue={defaultCountry}\n                onChange={e => { setCountry(e.target.value) }}\n                style={\n                  props.theme === 'light' ? {} : {\n                    backgroundColor: darkTheme.backround,\n                    color: darkTheme.text,\n                    borderColor: 'gray'\n                  }\n                }\n              >\n                {countries && countries.countries &&\n                  countries.countries.map((country) => {\n                    return (<option value={country}>{country}</option>)\n                  })}\n              </Form.Control>\n            </Col>\n          </Form.Group>\n        </Form>\n\n        <Tabs\n          defaultActiveKey=\"cumulative\"\n          id=\"dash-tabs\"\n          className={tabsClassName}\n        >\n          <Tab\n            eventKey=\"cumulative\"\n            title=\"Cumulative\"\n            className={tabClassName}\n          >\n            <Historical theme={props.theme} country={country} />\n          </Tab>\n          <Tab\n            eventKey=\"daily\"\n            title=\"Daily\"\n            className={tabClassName}\n          >\n            <Daily theme={props.theme} country={country} />\n          </Tab>\n        </Tabs>\n      </>\n    );\n  } else {\n    return (<Loading />);\n  }\n\n}\n\nexport default Dashboard;\n","import React from 'react';\nimport './About.css';\n\nexport const About = () => (\n  <>\n    <h1>About</h1>\n    <h2>\n      Covid 19 Dashboard\n    </h2>\n    <p>\n      See the current Covid 19 situation.\n    </p>\n    <h3>Whoami</h3>\n    <p>My name is <a href=\"https://lorenzofelletti.github.io\">Lorenzo Felletti</a> and I'm a computer engineering student ad the University of Bologna.</p>\n    <p>Source code <a href=\"https://github.com/lorenzofelletti/covid19dashboard\">here</a>.</p>\n  </>\n)\n\nexport default About;\n","import React from 'react';\nimport { Navbar, Nav, Button, Form } from 'react-bootstrap';\nimport { func, string } from 'prop-types';\nimport './NavigationBar.css';\n\n/**\n * The application Navigation Bar.\n * It is based on the react-bootstrap NavBar component.\n */\nconst NavigationBar = ({ basename, theme, toggleTheme }) => {\n\n  return (\n    <Navbar id=\"navigation-bar\" collapseOnSelect sticky=\"top\" expand=\"lg\" bg={theme} variant={theme}>\n      <Navbar.Brand href={`${basename}`}>\n        <img\n          src={`${basename}/logo.gif`}\n          width=\"120\"\n          height=\"40\"\n          className=\"d-inline-block align-top\"\n          alt=\"covid19dashboard\"\n        />\n      </Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n      <Navbar.Collapse id=\"responsive-navbar-nav\">\n        <Nav className=\"mr-auto\">\n          <Nav.Link href={`${basename}`}>Dashboard</Nav.Link>\n          <Nav.Link href={`${basename}/#/about`}>About</Nav.Link>\n        </Nav>\n        <Form inline>\n          <Button variant={(theme === 'light') ? 'dark' : 'light'} onClick={toggleTheme}>\n            Switch Theme\n          </Button>\n        </Form>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n}\n\nNavigationBar.propTypes = {\n  basename: string.isRequired,\n  theme: string.isRequired,\n  toggleTheme: func.isRequired\n}\n\nexport default NavigationBar;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport './App.css';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport { Container } from 'react-bootstrap';\nimport { ThemeProvider } from 'styled-components';\nimport { GlobalStyles } from './components/Globalstyle';\nimport { lightTheme, darkTheme } from './components/Themes';\nimport Dashboard from './components/Dashboard';\nimport { About } from './components/About';\nimport NavigationBar from './components/NavigationBar';\nimport { useDarkMode } from './components/useDarkMode';\n\nconst BASENAME = \"/covid19dashboard\";\n\nfunction App() {\n  const [theme, themeToggler, mountedComponent] = useDarkMode();\n\n  if(!mountedComponent)\n    return <div/>;\n\n  return (\n    <ThemeProvider theme={theme === 'light' ? lightTheme : darkTheme}>\n      <>\n        <GlobalStyles />\n        <div className=\"App\">\n          <Router basename={BASENAME}>\n            <NavigationBar basename={BASENAME} theme={theme} toggleTheme={themeToggler} />\n            <Container>\n              <Switch>\n                <Route exact path='/'>\n                  <Dashboard theme={theme} />\n                </Route>\n                <Route path='/about'>\n                  <About theme={theme} />\n                </Route>\n              </Switch>\n            </Container>\n          </Router>\n        </div>\n      </>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import { useEffect, useState } from \"react\";\n\nexport const useDarkMode = () => {\n  const [theme, setTheme] = useState(\"light\");\n  const [mountedComponent, setMountedComponent] = useState(false);\n\n  const setMode = (mode) => {\n    window.localStorage.setItem(\"theme\", mode);\n    setTheme(mode);\n  };\n\n  const themeToggler = () => {\n    theme === \"light\" ? setMode(\"dark\") : setMode(\"light\");\n  };\n\n  useEffect(() => {\n    const localTheme = window.localStorage.getItem(\"theme\");\n    localTheme ? setTheme(localTheme) : setMode(\"light\");\n    setMountedComponent(true);\n  }, []);\n\n  return [theme, themeToggler, mountedComponent];\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}