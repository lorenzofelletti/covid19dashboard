{"version":3,"sources":["components/Globalstyle.js","components/Themes.js","components/CustomLineChart.jsx","components/Historical.jsx","components/Daily.jsx","components/Dashboard.jsx","components/About.jsx","components/NavigationBar.jsx","App.js","components/useDarkMode.js","reportWebVitals.js","index.js"],"names":["GlobalStyles","createGlobalStyle","theme","body","text","lightTheme","toggleBorder","backround","darkTheme","categoryColor","cases","deaths","recovered","CustomLineCharts","props","countryData","data","width","height","margin","left","right","formatter","value","Intl","NumberFormat","format","dataKey","allowDuplicatedCategory","type","tickFormatter","map","c","name","dot","stroke","BASE_URL","defaultCountry","Historical","useState","error","setError","isLoaded","setIsLoaded","countries","setCountries","selectedCountry","setSelectedCountry","undefined","setCountryData","fetchCountryData","country","fetch","headers","then","res","json","result","timeline","countryDataFormatted","Object","entries","category","values","cat","date","number","push","e","useEffect","forEach","d","Set","Form","className","Group","as","Row","controlId","Label","column","sm","Col","Control","custom","defaultValue","onChange","target","style","backgroundColor","color","borderColor","idx","CustomLineChart","Alert","variant","Heading","Daily","elem","prev","curr","dataCases","dataDeaths","dataRecovered","dataFinal","i","length","datum","console","log","fill","Dashboard","Tabs","defaultActiveKey","id","Tab","eventKey","title","About","NavigationBar","basename","toggleTheme","Navbar","collapseOnSelect","sticky","expand","bg","Brand","href","src","alt","Toggle","aria-controls","Collapse","Nav","Link","inline","Button","onClick","BASENAME","App","setTheme","mountedComponent","setMountedComponent","setMode","mode","window","localStorage","setItem","localTheme","getItem","useDarkMode","themeToggler","Container","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4dfb10c7.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyles = createGlobalStyle`\n  body {\n    background: ${({ theme }) => theme.body};\n    color: ${({ theme }) => theme.text};\n  }\n  `\n\n  /*font-family: Tahoma, Helvetica, Arial, Roboto, sans-serif;\n  transition: all 0.50s linear;*/\n","export const lightTheme = {\n  body: '#FFF',\n  text: '#101010',\n  toggleBorder: '#FFF',\n  backround: '#363537'\n}\n\nexport const darkTheme = {\n  body: '#121212', //'#363537',\n  text: '#FAFAFA',\n  toggleBorder: '#6B8096',\n  backround: '#363537'\n}\n","import React from 'react';\nimport { LineChart, ResponsiveContainer, XAxis, YAxis, Tooltip, Line, Legend } from 'recharts';\n\nconst categoryColor = {\n  cases: \"#FF0000\",\n  deaths: \"#252525\",\n  recovered: \"#62FF00\"\n}\n\nfunction CustomLineCharts(props) {\n  const countryData = props.data;\n  return (\n    <ResponsiveContainer width='100%' height={500} >\n      <LineChart margin={{ left: 25, right: 4 }}>\n        <Tooltip formatter={(value) => new Intl.NumberFormat('it').format(value)} />\n        <XAxis dataKey=\"date\" allowDuplicatedCategory={false}></XAxis>\n        <YAxis type=\"number\" dataKey=\"number\" tickFormatter={(value) => new Intl.NumberFormat('en').format(value)} ></YAxis>\n        <Legend />\n        {countryData && countryData.map(c => (\n          <Line type='monotone' dataKey=\"number\" data={c.data} name={c.name} key={c.name} dot={false} stroke={categoryColor[c.name]} />\n        ))}\n      </LineChart>\n    </ResponsiveContainer>\n  )\n}\n\nexport default CustomLineCharts;","import React, { useState, useEffect } from 'react';\nimport { Alert, Form, Col } from 'react-bootstrap';\nimport CustomLineCharts from './CustomLineChart';\nimport './Dashboard.css';\nimport { darkTheme } from './Themes';\n\nconst BASE_URL = 'https://disease.sh';\nconst defaultCountry = 'Italy';\nconst days = 'all';\n\n\nfunction Historical(props) {\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [countries, setCountries] = useState({});\n  const [selectedCountry, setSelectedCountry] = useState(defaultCountry);\n  const [countryData, setCountryData] = useState(undefined);\n\n\n  useEffect(() => {\n    if (!isLoaded) {\n      fetch(`${BASE_URL}/v3/covid-19/historical?lastdays=1`, {\n        headers: {\n          'accept': 'application/json',\n        }\n      })\n        .then(res => res.json())\n        .then(\n          (result) => {\n            let countries = { countries: [] };\n            result.forEach(d => {\n              countries.countries.push(d.country);\n            });\n            countries.countries = [...new Set(countries.countries)];\n            setIsLoaded(true);\n            setError(error);\n            setCountries(countries);\n            setSelectedCountry(countries[0]);\n            fetchCountryData(countries[0]);\n          },\n          (e) => {\n            setIsLoaded(true);\n            setError(e);\n          }\n        )\n    } else {\n      fetchCountryData(selectedCountry);\n    }\n  }, [selectedCountry, isLoaded, error]);\n\n  function fetchCountryData(country) {\n    if (!country) return;\n    fetch(`${BASE_URL}/v3/covid-19/historical/${country}?lastdays=${days}`, {\n      headers: {\n        'accept': 'application/json'\n      }\n    })\n      .then(res => res.json())\n      .then(\n        (result) => {\n          if (result.timeline &&\n            result.timeline.cases &&\n            result.timeline.deaths &&\n            result.timeline.recovered) {\n\n            let countryDataFormatted = [];\n            for (let [category, values] of Object.entries(result.timeline)) {\n              let cat = { name: category, data: [] };\n              for (let [date, number] of Object.entries(values)) {\n                cat.data.push({\n                  date: date,\n                  number: number\n                });\n              }\n              countryDataFormatted.push(cat);\n            }\n            setCountryData(countryDataFormatted);\n          }\n          else {\n            setError(\"Bad format response.\");\n          }\n        },\n        (e) => {\n          setError(e);\n        }\n      )\n  }\n\n\n  if (!isLoaded || !countryData) {\n    fetchCountryData(selectedCountry);\n    return (\n      <>\n        <Alert variant=\"light\">\n          <Alert.Heading>I'm loading the data</Alert.Heading>\n          <p>Please be patient...</p>\n        </Alert>\n      </>\n    )\n  } else {\n    return (\n      <>\n        <h1>Cumulative Cases</h1>\n        <Form className='mt-3'>\n          <Form.Group as={Form.Row} controlId=\"country\">\n            <Form.Label column sm={4} >Selected Country</Form.Label>\n            <Col sm={6}>\n              <Form.Control\n                as=\"select\"\n                custom\n                value={selectedCountry}\n                defaultValue={defaultCountry}\n                onChange={e => { setSelectedCountry(e.target.value) }}\n                style={\n                  props.theme === 'light' ? {} : {\n                    backgroundColor: darkTheme.backround,\n                    color: darkTheme.text,\n                    borderColor: 'gray'\n                  }\n                }\n              >\n                {countries && countries.countries &&\n                  countries.countries.map((country, idx) => {\n                    return (<option value={country}>{country}</option>)\n                  })}\n              </Form.Control>\n            </Col>\n          </Form.Group>\n        </Form>\n        <CustomLineCharts data={countryData} />\n      </>\n    );\n  }\n}\n\nexport default Historical;\n","import React, { useState, useEffect } from 'react';\nimport { Alert, Form, Col } from 'react-bootstrap';\nimport { BarChart, ResponsiveContainer, XAxis, YAxis, Tooltip, Bar, Legend } from 'recharts'\nimport './Dashboard.css';\nimport { darkTheme } from './Themes';\n\nconst BASE_URL = 'https://disease.sh';\nconst defaultCountry = 'Italy';\nconst days = 'all';\n\nconst categoryColor = {\n  cases: \"#FF0000\",\n  deaths: \"#252525\",\n  recovered: \"#62FF00\"\n}\n\nfunction Daily(props) {\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [countries, setCountries] = useState({});\n  const [selectedCountry, setSelectedCountry] = useState(defaultCountry);\n  const [countryData, setCountryData] = useState(undefined);\n\n  useEffect(() => {\n    if (!isLoaded) {\n      fetch(`${BASE_URL}/v3/covid-19/historical?lastdays=1`, {\n        headers: {\n          'accept': 'application/json',\n        }\n      })\n        .then(res => res.json())\n        .then(\n          (result) => {\n            let countries = { countries: [] };\n            result.forEach(d => {\n              countries.countries.push(d.country);\n            });\n            countries.countries = [...new Set(countries.countries)];\n            setIsLoaded(true);\n            setError(error);\n            setCountries(countries);\n            setSelectedCountry(countries[0]);\n            fetchCountryData(countries[0]);\n          },\n          (e) => {\n            setIsLoaded(true);\n            setError(e);\n          }\n        )\n    } else {\n      fetchCountryData(selectedCountry);\n    }\n  }, [selectedCountry, isLoaded, error]);\n\n  function fetchCountryData(country) {\n    if (!country) return;\n    fetch(`${BASE_URL}/v3/covid-19/historical/${country}?lastdays=${days}`, {\n      headers: {\n        'accept': 'application/json'\n      }\n    })\n      .then(res => res.json())\n      .then(\n        (result) => {\n          if (result.timeline &&\n            result.timeline.cases &&\n            result.timeline.deaths &&\n            result.timeline.recovered) {\n\n            let countryDataFormatted = [];\n            for (let [category, values] of Object.entries(result.timeline)) {\n              let cat = { name: category, data: [] };\n              for (let [date, number] of Object.entries(values)) {\n                cat.data.push({\n                  date: date,\n                  number: number\n                });\n              }\n              countryDataFormatted.push(cat);\n            }\n\n            countryDataFormatted.forEach(elem => {\n              let prev = 0;\n              let curr = 0;\n              for (let e of elem.data) {\n                curr = e.number;\n                e.number = (e.number - prev > 0) ? e.number - prev : 0;\n                prev = curr;\n              }\n            });\n            let dataCases = countryDataFormatted[0].data;\n            let dataDeaths = countryDataFormatted[1].data;\n            let dataRecovered = countryDataFormatted[2].data;\n            let dataFinal = [];\n            for (let i = 0; i < dataCases.length && dataRecovered.length && dataDeaths.length; i++) {\n              let datum = { date: dataCases[i].date };\n              datum.cases = dataCases[i].number;\n              datum.recovered = dataRecovered[i].number;\n              datum.deaths = dataDeaths[i].number;\n              dataFinal.push(datum);\n            }\n            countryDataFormatted = dataFinal;\n            console.log(countryDataFormatted);\n            setCountryData(countryDataFormatted);\n          }\n          else {\n            setError(\"Bad format response.\");\n          }\n        },\n        (e) => {\n          setError(e);\n        }\n      )\n  }\n\n\n  if (!isLoaded || !countryData) {\n    selectedCountry && fetchCountryData(selectedCountry);\n    return (\n      <>\n        <Alert variant=\"light\">\n          <Alert.Heading>I'm loading the data</Alert.Heading>\n          <p>Please be patient...</p>\n        </Alert>\n      </>\n    )\n  } else {\n    return (\n      <>\n        <h1>Daily Cases</h1>\n        <Form className='mt-3'>\n          <Form.Group as={Form.Row} controlId=\"country-daily\">\n            <Form.Label column sm={4} >Selected Country</Form.Label>\n            <Col sm={6}>\n              <Form.Control\n                as=\"select\"\n                custom\n                value={selectedCountry}\n                defaultValue={defaultCountry}\n                onChange={e => { setSelectedCountry(e.target.value) }}\n                style={\n                  props.theme === 'light' ? {} : {\n                    backgroundColor: darkTheme.backround,\n                    color: darkTheme.text,\n                    borderColor: 'gray'\n                  }\n                }\n              >\n                {countries && countries.countries &&\n                  countries.countries.map((country, idx) => {\n                    return (<option value={country}>{country}</option>)\n                  })}\n              </Form.Control>\n            </Col>\n          </Form.Group>\n        </Form>\n        <ResponsiveContainer width='100%' height={500} >\n          <BarChart margin={{ left: 25, right: 4 }} data={countryData}>\n            <Tooltip formatter={(value) => new Intl.NumberFormat('it').format(value)} />\n            <XAxis dataKey=\"date\"></XAxis>\n            <YAxis type=\"number\" tickFormatter={(value) => new Intl.NumberFormat('en').format(value)} ></YAxis>\n            <Legend />\n            <Bar dataKey=\"cases\" name={'cases'} key={'cases'} fill={categoryColor['cases']} />\n            <Bar dataKey=\"deaths\" name={'deaths'} key={'deaths'} fill={categoryColor['deaths']} />\n            <Bar dataKey=\"recovered\" name={'recovered'} key={'recovered'} fill={categoryColor['recovered']} />\n          </BarChart>\n        </ResponsiveContainer>\n      </>\n    );\n  }\n}\n\nexport default Daily;\n","import React from 'react';\nimport { Tabs, Tab } from 'react-bootstrap';\nimport './Dashboard.css';\nimport Historical from './Historical';\nimport Daily from './Daily';\n\nfunction Dashboard(props) {\n  return (\n    <>\n    <Tabs defaultActiveKey=\"cumulative\" id=\"dash-tabs\"  className='mt-3'>\n      <Tab eventKey=\"cumulative\" title=\"Cumulative\">\n        <Historical theme={props.theme}/>\n      </Tab>\n      <Tab eventKey=\"daily\" title=\"Daily\">\n        <Daily theme={props.theme}/>\n      </Tab>\n      </Tabs>\n    </>\n  );\n}\n\nexport default Dashboard;\n","import React from 'react';\nimport './About.css';\n\nexport const About = () => (\n  <>\n    <h1>About</h1>\n    <h2>\n      Covid 19 Dashboard\n    </h2>\n    <p>\n      See the current Covid 19 situation.\n    </p>\n    <h3>Whoami</h3>\n    <p>My name is Lorenzo Felletti and I'm a computer engineering student ad the University of Bologna.</p>\n  </>\n)\n\nexport default About;\n","import React from 'react';\nimport { Navbar, Nav, Button, Form } from 'react-bootstrap';\nimport { func, string } from 'prop-types';\nimport './NavigationBar.css';\n\n/**\n * The application Navigation Bar.\n * It is based on the react-bootstrap NavBar component.\n */\nconst NavigationBar = ({ basename, theme, toggleTheme }) => {\n\n  return (\n    <Navbar id=\"navigation-bar\" collapseOnSelect sticky=\"top\" expand=\"lg\" bg={theme} variant={theme}>\n      <Navbar.Brand href={`${basename}`}>\n        <img\n          src={`${basename}/logo.gif`}\n          width=\"120\"\n          height=\"40\"\n          className=\"d-inline-block align-top\"\n          alt=\"covid19dashboard\"\n        />\n      </Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n      <Navbar.Collapse id=\"responsive-navbar-nav\">\n        <Nav className=\"mr-auto\">\n          <Nav.Link href={`${basename}`}>Dashboard</Nav.Link>\n          <Nav.Link href={`${basename}/#/about`}>About</Nav.Link>\n        </Nav>\n        <Form inline>\n          <Button variant={(theme === 'light') ? 'dark' : 'light'} onClick={toggleTheme}>\n            Switch Theme\n          </Button>\n        </Form>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n}\n\nNavigationBar.propTypes = {\n  basename: string.isRequired,\n  theme: string.isRequired,\n  toggleTheme: func.isRequired\n}\n\nexport default NavigationBar;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport './App.css';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport { Container } from 'react-bootstrap';\nimport { ThemeProvider } from 'styled-components';\nimport { GlobalStyles } from './components/Globalstyle';\nimport { lightTheme, darkTheme } from './components/Themes';\nimport Dashboard from './components/Dashboard';\nimport { About } from './components/About';\nimport NavigationBar from './components/NavigationBar';\nimport { useDarkMode } from './components/useDarkMode';\n\nconst BASENAME = \"/covid19dashboard\";\n\nfunction App() {\n  const [theme, themeToggler, mountedComponent] = useDarkMode();\n\n  if(!mountedComponent)\n    return <div/>;\n\n  return (\n    <ThemeProvider theme={theme === 'light' ? lightTheme : darkTheme}>\n      <>\n        <GlobalStyles />\n        <div className=\"App\">\n          <Router basename={BASENAME}>\n            <NavigationBar basename={BASENAME} theme={theme} toggleTheme={themeToggler} />\n            <Container>\n              <Switch>\n                <Route exact path='/'>\n                  <Dashboard theme={theme} />\n                </Route>\n                <Route path='/about'>\n                  <About theme={theme} />\n                </Route>\n              </Switch>\n            </Container>\n          </Router>\n        </div>\n      </>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import { useEffect, useState } from 'react';\n\nexport const useDarkMode = () => {\n  const [theme, setTheme] = useState('light');\n  const [mountedComponent, setMountedComponent] = useState(false)\n\n  const setMode = mode => {\n    window.localStorage.setItem('theme', mode)\n    setTheme(mode)\n  };\n\n  const themeToggler = () => {\n    theme === 'light' ? setMode('dark') : setMode('light')\n  };\n\n  useEffect(() => {\n    const localTheme = window.localStorage.getItem('theme');\n    localTheme ? setTheme(localTheme) : setMode('light')\n    setMountedComponent(true)\n  }, []);\n\n  return [theme, themeToggler, mountedComponent]\n};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}