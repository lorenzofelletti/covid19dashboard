{"version":3,"sources":["components/Dashboard.jsx","components/About.jsx","components/NavigationBar.jsx","App.js","reportWebVitals.js","index.js"],"names":["BASE_URL","defaultCountry","categoryColor","cases","deaths","recovered","Dashboard","props","useState","error","setError","isLoaded","setIsLoaded","countries","setCountries","selectedCountry","setSelectedCountry","undefined","countryData","setCountryData","fetchCountryData","country","fetch","headers","then","res","json","result","timeline","countryDataFormatted","Object","entries","category","values","cat","name","data","date","number","push","e","useEffect","forEach","d","Set","Form","className","Group","as","Row","controlId","Label","column","sm","Col","Control","custom","value","defaultValue","onChange","target","map","idx","width","height","dataKey","allowDuplicatedCategory","type","c","stroke","Alert","variant","Heading","About","NavigationBar","Navbar","id","collapseOnSelect","sticky","expand","bg","Brand","href","basename","Toggle","aria-controls","Collapse","Nav","Link","BASENAME","App","Container","exact","path","epath","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a9e6c2c4.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Alert, Form, Col } from 'react-bootstrap';\nimport { LineChart, ResponsiveContainer, XAxis, YAxis, Tooltip, Line, Legend } from 'recharts'\nimport './Dashboard.css';\n\nconst BASE_URL = 'https://disease.sh';\nconst defaultCountry = 'Italy';\nconst categoryColor = {\n  cases: \"#FF0000\",\n  deaths: \"#252525\",\n  recovered: \"#62FF00\"\n}\n\nfunction Dashboard(props) {\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [countries, setCountries] = useState({});\n  const [selectedCountry, setSelectedCountry] = useState(defaultCountry);\n  const [countryData, setCountryData] = useState(undefined);\n\n\n  useEffect(() => {\n    if (!isLoaded) {\n      fetch(`${BASE_URL}/v3/covid-19/historical?lastdays=1`, {\n        headers: {\n          'accept': 'application/json',\n        }\n      })\n        .then(res => res.json())\n        .then(\n          (result) => {\n            let countries = { countries: [] };\n            result.forEach(d => {\n              countries.countries.push(d.country);\n            });\n            countries.countries = [...new Set(countries.countries)];\n            setIsLoaded(true);\n            setError(error);\n            setCountries(countries);\n            setSelectedCountry(countries[0]);\n            fetchCountryData(countries[0]);\n          },\n          (e) => {\n            setIsLoaded(true);\n            setError(e);\n          }\n        )\n    }\n  }, []);\n\n  function fetchCountryData(country) {\n    fetch(`${BASE_URL}/v3/covid-19/historical/${country}?lastdays=30`, {\n      headers: {\n        'accept': 'application/json'\n      }\n    })\n      .then(res => res.json())\n      .then(\n        (result) => {\n          if (result.timeline &&\n            result.timeline.cases &&\n            result.timeline.deaths &&\n            result.timeline.recovered) {\n\n            let countryDataFormatted = [];\n            for (let [category, values] of Object.entries(result.timeline)) {\n              let cat = { name: category, data: [] };\n              for (let [date, number] of Object.entries(values)) {\n                cat.data.push({\n                  date: date,\n                  number: number\n                });\n              }\n              countryDataFormatted.push(cat);\n            }\n            setCountryData(countryDataFormatted);\n          }\n          else {\n            setError(\"Bad format response.\");\n          }\n        },\n        (e) => {\n          setError(e);\n        }\n      )\n  }\n\n\n  if (!isLoaded || !countryData) {\n    selectedCountry && fetchCountryData(selectedCountry);\n    return (\n      <>\n        <Alert variant=\"light\">\n          <Alert.Heading>I'm loading the data</Alert.Heading>\n          <p>Please be patient...</p>\n        </Alert>\n      </>\n    )\n  } else {\n    return (\n      <>\n        <Form className='mt-3'>\n          <Form.Group as={Form.Row} controlId=\"country\">\n            <Form.Label column sm={4} >Selected Country</Form.Label>\n            <Col sm={6}>\n              <Form.Control\n                as=\"select\"\n                custom\n                value={selectedCountry}\n                defaultValue={defaultCountry}\n                onChange={e => {\n                  if (e.target.value) {\n                    setSelectedCountry(e.target.value);\n                    fetchCountryData(e.target.value);\n                  }\n                }}\n              >\n                {countries && countries.countries &&\n                  countries.countries.map((country, idx) => {\n                    return (<option value={country}>{country}</option>)\n                  })}\n              </Form.Control>\n            </Col>\n          </Form.Group>\n        </Form>\n        <ResponsiveContainer width='100%' height={500}>\n          <LineChart>\n            <Tooltip />\n            <XAxis dataKey=\"date\" allowDuplicatedCategory={false}></XAxis>\n            <YAxis type=\"number\" dataKey=\"number\"></YAxis>\n            <Legend />\n            {countryData && countryData.map(c => (\n              <Line type='monotone' dataKey=\"number\" data={c.data} name={c.name} key={c.name} stroke={categoryColor[c.name]} />\n            ))}\n          </LineChart>\n        </ResponsiveContainer>\n      </>\n    );\n  }\n}\n\nexport default Dashboard;\n","import React from 'react';\nimport './About.css';\n\nexport const About = () => (\n  <>\n    <h1>About</h1>\n    <h2>\n      Covid 19 Dashboard\n    </h2>\n    <p>\n      See the current Covid 19 situation.\n    </p>\n    <h3>Whoami</h3>\n    <p>My name is Lorenzo Felletti and I'm a computer engineering student ad the University of Bologna.</p>\n  </>\n)\n\nexport default About;\n","import React from 'react';\nimport { Navbar, Nav } from 'react-bootstrap';\nimport './NavigationBar.css';\n\n/**\n * The application Navigation Bar.\n * It is based on the react-bootstrap NavBar component.\n */\nfunction NavigationBar(props) {\n\n  return (\n    <Navbar id=\"navigation-bar\" collapseOnSelect sticky=\"top\" expand=\"lg\" bg=\"light\" variant=\"light\">\n      <Navbar.Brand href={`${props.basename}`}>Covid19Dashboard</Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n      <Navbar.Collapse id=\"responsive-navbar-nav\">\n        <Nav className=\"mr-auto\">\n          <Nav.Link href={`${props.basename}`}>Dashboard</Nav.Link>\n          <Nav.Link href={`${props.basename}/#/about`}>About</Nav.Link>\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n}\n\nexport default NavigationBar;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport './App.css';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport { Container } from 'react-bootstrap';\nimport Dashboard from './components/Dashboard';\nimport { About } from './components/About';\nimport NavigationBar from './components/NavigationBar';\n\nconst BASENAME = \"/covid19dashboard\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router basename={BASENAME}>\n        <NavigationBar basename={BASENAME} />\n        <Container>\n          <Switch>\n            <Route exact path='/'>\n              <Dashboard />\n            </Route>\n            <Route epath='/about'>\n              <About />\n            </Route>\n          </Switch>\n        </Container>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}