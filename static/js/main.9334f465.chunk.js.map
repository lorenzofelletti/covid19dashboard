{"version":3,"sources":["components/Globalstyle.js","components/Themes.js","components/colors/colorsConsts.js","components/charts/LineChart/CustomLineChart.jsx","components/Loading.jsx","components/Historical.jsx","components/charts/BarChart/CustomBarChart.jsx","components/Daily.jsx","components/charts/ChartOptions.jsx","components/Dashboard.jsx","components/About.jsx","components/NavigationBar.jsx","App.js","components/useDarkMode.js","reportWebVitals.js","index.js"],"names":["GlobalStyles","createGlobalStyle","theme","body","text","lightTheme","toggleBorder","backround","darkTheme","categoryColor","cases","deaths","recovered","CustomLineCharts","props","countryData","data","className","ResponsiveContainer","width","height","LineChart","margin","left","right","Tooltip","formatter","value","Intl","NumberFormat","format","XAxis","dataKey","allowDuplicatedCategory","YAxis","type","tickFormatter","Legend","Brush","stroke","fill","map","c","Line","name","dot","Loading","Alert","variant","Heading","Historical","opts","useState","country","setCountry","isLoaded","setIsLoaded","undefined","setCountryData","useEffect","fetch","headers","then","res","json","result","timeline","countryDataFormatted","Object","entries","category","values","cat","date","number","push","console","error","e","fetchCountryData","filter","v","id","y","filterData","React","memo","CustomBarChart","toPrint","BarChart","Bar","Daily","forEach","elem","prev","curr","dataCases","dataDeaths","dataRecovered","dataFinal","i","length","datum","o","ChartOptions","state","_setState","setState","changeOpts","Form","inline","Group","controlId","Row","Check","custom","label","defaultChecked","onChange","defaultCountry","Dashboard","countries","setCountries","options","setOptions","tabsClassName","tabClassName","sort","d","as","Label","column","sm","Col","Control","defaultValue","target","style","backgroundColor","color","borderColor","Tabs","defaultActiveKey","Tab","eventKey","title","mountOnEnter","About","href","NavigationBar","basename","toggleTheme","Navbar","collapseOnSelect","expand","bg","Brand","src","alt","Toggle","aria-controls","Collapse","Nav","Link","Button","onClick","BASENAME","App","setTheme","mountedComponent","setMountedComponent","setMode","mode","window","localStorage","setItem","localTheme","getItem","useDarkMode","themeToggler","Container","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9334f465.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components'\n\nexport const GlobalStyles = createGlobalStyle`\n  body {\n    background: ${({ theme }) => theme.body};\n    color: ${({ theme }) => theme.text};\n  }\n  `\n\n/* font-family: Tahoma, Helvetica, Arial, Roboto, sans-serif;\n * transition: all 0.50s linear;\n */\n","export const lightTheme = {\n  body: \"#FFF\",\n  text: \"#101010\",\n  toggleBorder: \"#FFF\",\n  backround: \"#363537\",\n};\n\nexport const darkTheme = {\n  body: \"#121212\", //'#363537',\n  text: \"#FAFAFA\",\n  toggleBorder: \"#6B8096\",\n  backround: \"#363537\",\n};\n","const categoryColor = {\n  cases: \"#FF0000\",\n  deaths: \"#FFAD05\", //\"#252525\",\n  recovered: \"#62FF00\"\n}\n\nexport default categoryColor;","import React from 'react';\n\nimport { LineChart, ResponsiveContainer, XAxis, YAxis, Tooltip, Line, Legend, Brush } from 'recharts';\nimport \"./CustomLineChart.css\";\n\nimport { darkTheme } from '../../Themes';\nimport categoryColor from '../../colors/colorsConsts';\n\nfunction CustomLineCharts(props) {\n  const countryData = props.data;\n\n  return (\n    <div className=\"chart-container\">\n      <ResponsiveContainer width='100%' height={500} >\n        <LineChart margin={{ left: 25, right: 4 }}>\n          <Tooltip formatter={(value) => new Intl.NumberFormat('it').format(value)} />\n          <XAxis dataKey=\"date\" allowDuplicatedCategory={false} />\n          <YAxis type=\"number\" dataKey=\"number\"\n            tickFormatter={(value) => new Intl.NumberFormat('it').format(value)} />\n          <Legend />\n          <Brush\n            dataKey=\"date\"\n            stroke={props.theme === \"dark\" ? darkTheme.text : \"\"}\n            fill={props.theme === \"dark\" ? darkTheme.backround : \"#fff\"}\n          />\n          {countryData.map(c => (\n            <Line type='monotone' dataKey=\"number\" data={c.data} name={c.name} key={c.name} dot={false} stroke={categoryColor[c.name]} />\n          ))}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  )\n}\n\nexport default CustomLineCharts;","import React from 'react';\nimport { Alert } from 'react-bootstrap';\n\nexport const Loading = () => (\n  <>\n    <Alert variant=\"light\">\n      <Alert.Heading>I'm loading the data</Alert.Heading>\n      <p>Please be patient...</p>\n    </Alert>\n  </>\n)\n\nexport default Loading;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport CustomLineCharts from './charts/LineChart/CustomLineChart';\nimport './Dashboard.css';\nimport { Loading } from \"./Loading\";\n\nconst BASE_URL = 'https://disease.sh';\nconst days = 'all';\n\n\nfunction Historical(props) {\n  const opts = props.opts;\n  const [country, setCountry] = useState(props.country);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [countryData, setCountryData] = useState(undefined);\n\n  function fetchCountryData(country) {\n    if (!country) return;\n    fetch(`${BASE_URL}/v3/covid-19/historical/${country}?lastdays=${days}`, {\n      headers: {\n        'accept': 'application/json'\n      }\n    })\n      .then(res => res.json())\n      .then(\n        (result) => {\n          if (result.timeline &&\n            result.timeline.cases &&\n            result.timeline.deaths &&\n            result.timeline.recovered) {\n\n            let countryDataFormatted = [];\n            for (let [category, values] of Object.entries(result.timeline)) {\n              let cat = { name: category, data: [] };\n              for (let [date, number] of Object.entries(values)) {\n                cat.data.push({\n                  date: date,\n                  number: number\n                });\n              }\n              countryDataFormatted.push(cat);\n            }\n            setIsLoaded(true);\n            setCountryData(countryDataFormatted);\n          }\n          else {\n            console.error(\"Bad format response.\");\n          }\n        },\n        (e) => {\n          console.error(e);\n        }\n      )\n  }\n\n  const filterData = (v, id) => {\n    // y = true if:\n    // id is that of cases && opts.cases is true\n    // id is that of deaths && opts.deaths is true\n    // id of recovered && opts.recovered === true\n    let y;\n    switch (id) {\n      case 0:\n        y = opts.cases;\n        break;\n      case 1:\n        y = opts.deaths;\n        break;\n      case 2:\n        y = opts.recovered\n        break;\n      default:\n        break;\n    }\n    if (y) return v;\n  }\n\n  useEffect(() => {\n    if (props.country !== country) {\n      setCountry(props.country);\n      setIsLoaded(false);\n    }\n    if (!isLoaded) fetchCountryData(props.country);\n  }, [isLoaded, country, props.country])\n\n\n  if (!isLoaded || !countryData) {\n    return (\n      <>\n        <Loading />\n      </>\n    )\n  } else {\n    return (\n      <div className=\"mt-3\">\n        <CustomLineCharts data={countryData.filter((v, id) => filterData(v, id))} />\n      </div>\n    );\n  }\n}\n\nHistorical.propTypes = {\n  opts: PropTypes.objectOf(PropTypes.bool),\n  theme: PropTypes.string,\n  country: PropTypes.string.isRequired,\n}\n\nexport default React.memo(Historical);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { BarChart, ResponsiveContainer, XAxis, YAxis, Tooltip, Bar, Legend, Brush } from 'recharts';\n\nimport { darkTheme } from '../../Themes';\nimport categoryColor from \"../../colors/colorsConsts\";\nimport \"./CustomBarChart.css\"\n\nfunction CustomBarChart(props) {\n  const countryData = props.countryData;\n  const toPrint = props.toPrint;\n\n\n  return (\n    <div className=\"chart-container\">\n      <ResponsiveContainer width='100%' height={500} >\n        <BarChart margin={{ left: 25, right: 4 }} data={countryData}>\n          <Tooltip formatter={(value) => new Intl.NumberFormat('it').format(value)} />\n          <XAxis dataKey=\"date\"></XAxis>\n          <YAxis type=\"number\" tickFormatter={(value) => new Intl.NumberFormat('it').format(value)} ></YAxis>\n          <Legend />\n          <Brush\n            dataKey=\"date\"\n            stroke={props.theme === \"dark\" ? darkTheme.text : \"\"}\n            fill={props.theme === \"dark\" ? darkTheme.backround : \"#fff\"}\n          />\n          {toPrint.map(c => (<Bar dataKey={c} name={c} key={c} fill={categoryColor[c]} />))}\n        </BarChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nCustomBarChart.propTypes = {\n  countryData: PropTypes.arrayOf(PropTypes.object),\n  theme: PropTypes.string,\n  toPrint: PropTypes.arrayOf(PropTypes.string)\n}\n\nexport default CustomBarChart;","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Dashboard.css';\nimport { Loading } from \"./Loading\";\nimport CustomBarChart from \"./charts/BarChart/CustomBarChart\"\n\nconst BASE_URL = 'https://disease.sh';\nconst days = 'all';\n\n\nfunction Daily(props) {\n  const opts = props.opts;\n  const [country, setCountry] = useState(props.country);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [countryData, setCountryData] = useState(undefined);\n\n  function fetchCountryData(country) {\n    if (!country) return;\n    fetch(`${BASE_URL}/v3/covid-19/historical/${country}?lastdays=${days}`, {\n      headers: {\n        'accept': 'application/json'\n      }\n    })\n      .then(res => res.json())\n      .then(\n        (result) => {\n          if (result.timeline &&\n            result.timeline.cases &&\n            result.timeline.deaths &&\n            result.timeline.recovered) {\n\n            let countryDataFormatted = [];\n            for (let [category, values] of Object.entries(result.timeline)) {\n              let cat = { name: category, data: [] };\n              for (let [date, number] of Object.entries(values)) {\n                cat.data.push({\n                  date: date,\n                  number: number\n                });\n              }\n              countryDataFormatted.push(cat);\n            }\n\n            countryDataFormatted.forEach(elem => {\n              let prev = 0;\n              let curr = 0;\n              for (let e of elem.data) {\n                curr = e.number;\n                e.number = (e.number - prev > 0) ? e.number - prev : 0;\n                prev = curr;\n              }\n            });\n            let dataCases = countryDataFormatted[0].data;\n            let dataDeaths = countryDataFormatted[1].data;\n            let dataRecovered = countryDataFormatted[2].data;\n            let dataFinal = [];\n            for (let i = 0; i < dataCases.length && dataRecovered.length && dataDeaths.length; i++) {\n              let datum = { date: dataCases[i].date };\n              datum.cases = dataCases[i].number;\n              datum.recovered = dataRecovered[i].number;\n              datum.deaths = dataDeaths[i].number;\n              dataFinal.push(datum);\n            }\n            countryDataFormatted = dataFinal;\n            setIsLoaded(true);\n            setCountryData(countryDataFormatted);\n          }\n          else {\n            console.error(\"Bad format response.\");\n          }\n        },\n        (e) => {\n          console.error(e);\n        }\n      )\n  }\n\n\n  useEffect(() => {\n    if (props.country !== country) {\n      setCountry(props.country);\n      setIsLoaded(false);\n    }\n    if (!isLoaded) fetchCountryData(props.country);\n  }, [isLoaded, country, props.country])\n\n  function toPrint(opts) {\n    // return only the opts to be displayed\n    let res = [];\n    for (let o in opts) opts[o] && res.push(o);\n    return res;\n  }\n\n  if (!isLoaded || !countryData) {\n    return (\n      <>\n        <Loading />\n      </>\n    )\n  } else {\n    return (\n      <div className=\"mt-3\">\n        <CustomBarChart theme={props.theme} countryData={countryData} toPrint={toPrint(opts)} />\n      </div>\n    );\n  }\n}\n\nDaily.propTypes = {\n  opts: PropTypes.objectOf(PropTypes.bool),\n  theme: PropTypes.string,\n  country: PropTypes.string.isRequired,\n}\n\nexport default React.memo(Daily);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Form } from 'react-bootstrap';\n\nconst ChartOptions = (props) => {\n  const [state, _setState] = useState(props.opts);\n\n  const setState = (state) => {\n    props.changeOpts(state);\n    _setState(state);\n  }\n\n\n  return (\n    <Form inline>\n      <Form.Group controlId=\"chartsOptions\" >\n        <Form.Row>\n          <Form.Check\n            custom\n            type=\"switch\"\n            label=\"cases\"\n            id=\"casesOpt\"\n            className=\"mr-2\"\n            defaultChecked={state.cases}\n            value={state.cases}\n            onChange={() => setState({ ...state, cases: !state.cases })}\n          />\n          <Form.Check\n            custom\n            type=\"switch\"\n            label=\"deaths\"\n            id=\"deathsOpt\"\n            className=\"mr-2\"\n            defaultChecked={state.deaths}\n            value={state.deaths}\n            onChange={() => setState({ ...state, deaths: !state.deaths })}\n          />\n          <Form.Check\n            custom\n            type=\"switch\"\n            label=\"recovered\"\n            id=\"recoveredOpt\"\n            defaultChecked={state.recovered}\n            value={state.recovered}\n            onChange={() => setState({ ...state, recovered: !state.recovered })}\n          />\n        </Form.Row>\n      </Form.Group>\n    </Form>\n  )\n}\n\nChartOptions.propTypes = {\n  opts: PropTypes.objectOf(PropTypes.bool),\n  changeOpts: PropTypes.func\n}\n\nexport default ChartOptions;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from \"prop-types\";\n\nimport { Tabs, Tab } from 'react-bootstrap';\nimport './Dashboard.css';\nimport Historical from './Historical';\nimport Daily from './Daily';\nimport { lightTheme, darkTheme } from './Themes';\nimport { Form, Col } from 'react-bootstrap';\nimport Loading from './Loading';\nimport ChartOptions from \"./charts/ChartOptions\";\n\nconst BASE_URL = 'https://disease.sh';\nconst defaultCountry = 'Italy';\n\nfunction Dashboard(props) {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(defaultCountry);\n  const [options, setOptions] = useState({ cases: true, deaths: true, recovered: false })\n\n  let tabsClassName = 'mt-3 ';\n  let tabClassName = '';\n  if (props.theme === 'dark') {\n    tabsClassName += 'dark-tabs';\n    tabClassName += 'dark-tab ';\n  }\n\n  function fetchCountries(sort) {\n    setIsLoaded(true);\n    fetch(`${BASE_URL}/v3/covid-19/countries${sort && '?sort=' + sort}`, {\n      headers: {\n        'accept': 'application/json',\n      }\n    })\n      .then(res => res.json())\n      .then(\n        (result) => {\n          let countries = { countries: [] };\n          result.forEach(d => {\n            countries.countries.push(d.country);\n          });\n          setCountries(countries);\n        },\n        (e) => {\n          console.error(e);\n        }\n      )\n  }\n\n  useEffect(() => {\n    if (!isLoaded) fetchCountries('cases');\n  }, [isLoaded]);\n\n  if (countries && country) {\n    return (\n      <>\n        <style type=\"text/css\">\n          {`\n            .dark-tabs {\n              background-color: ${darkTheme.backround};\n              color: ${darkTheme.text};\n              border-radius: .25rem;\n              border-color: gray;\n            }\n  \n            .dark-tab {\n              border-radius: .25rem;\n            }\n            .dark-tab, .nav-link.active {\n              color: ${darkTheme.text};\n              \n            }\n  \n            a {\n              color: ${props.theme === 'dark' ? darkTheme.text : lightTheme.text}\n            }\n            a:hover {\n              color: ${props.theme === 'dark' ? darkTheme.text : lightTheme.text}\n            }\n  \n            .nav-tabs .nav-item.show .nav-link, .nav-tabs .nav-link.active {\n              border-radius: 0.25rem;\n            }\n            `}\n        </style>\n        <div className=\"flex-container\" >\n          <Form className='mt-3'>\n            <Form.Group as={Form.Row} controlId=\"country\">\n              <Form.Label column sm={4} >Selected Country</Form.Label>\n              <Col sm={6}>\n                <Form.Control\n                  as=\"select\"\n                  custom\n                  value={country}\n                  defaultValue={defaultCountry}\n                  onChange={e => { setCountry(e.target.value) }}\n                  style={\n                    props.theme === 'light' ? {} : {\n                      backgroundColor: darkTheme.backround,\n                      color: darkTheme.text,\n                      borderColor: 'gray'\n                    }\n                  }\n                >\n                  {countries?.countries?.map(\n                    (country) => (<option key={country} value={country}>{country}</option>))}\n                </Form.Control>\n              </Col>\n            </Form.Group>\n          </Form>\n          <ChartOptions opts={options} changeOpts={setOptions} />\n        </div>\n\n        <Tabs\n          defaultActiveKey=\"cumulative\"\n          id=\"dash-tabs\"\n          className={tabsClassName}\n        >\n          <Tab\n            eventKey=\"cumulative\"\n            title=\"Cumulative\"\n            className={tabClassName}\n            mountOnEnter={true}\n          >\n            <Historical theme={props.theme} country={country} opts={options} />\n          </Tab>\n          <Tab\n            eventKey=\"daily\"\n            title=\"Daily\"\n            className={tabClassName}\n            mountOnEnter={true}\n          >\n            <Daily theme={props.theme} country={country} opts={options} />\n          </Tab>\n        </Tabs>\n      </>\n    );\n  } else {\n    return (<Loading />);\n  }\n}\n\nDashboard.propTypes = {\n  theme: PropTypes.string,\n}\n\nexport default Dashboard;\n","import React from 'react';\nimport './About.css';\n\nexport const About = () => (\n  <>\n    <h1>About</h1>\n    <h2>\n      Covid-19 Dashboard\n    </h2>\n    <p>\n      See the current Covid-19 situation.\n    </p>\n    <h3>whoami</h3>\n    <p>My name is <a href=\"https://lorenzofelletti.github.io\">Lorenzo Felletti</a> and I'm a computer engineering student ad the University of Bologna.</p>\n    <p>Source code <a href=\"https://github.com/lorenzofelletti/covid19dashboard\">here</a>.</p>\n  </>\n)\n\nexport default About;\n","import React from 'react';\nimport { Navbar, Nav, Button, Form } from 'react-bootstrap';\nimport { func, string } from 'prop-types';\nimport './NavigationBar.css';\n\n/**\n * The application Navigation Bar.\n * It is based on the react-bootstrap NavBar component.\n */\nconst NavigationBar = ({ basename, theme, toggleTheme }) => {\n\n  return (\n    <Navbar id=\"navigation-bar\" collapseOnSelect expand=\"lg\" bg={theme} variant={theme}>\n      <Navbar.Brand href={`${basename}`}>\n        <img\n          src={`${basename}/logo.gif`}\n          width=\"120\"\n          height=\"40\"\n          className=\"d-inline-block align-top\"\n          alt=\"covid19dashboard\"\n        />\n      </Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n      <Navbar.Collapse id=\"responsive-navbar-nav\">\n        <Nav className=\"mr-auto\">\n          <Nav.Link href={`${basename}`}>Dashboard</Nav.Link>\n          <Nav.Link href={`${basename}/#/about`}>About</Nav.Link>\n        </Nav>\n        <Form inline>\n          <Button variant={(theme === 'light') ? 'dark' : 'light'} onClick={toggleTheme}>\n            Switch Theme\n          </Button>\n        </Form>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n}\n\nNavigationBar.propTypes = {\n  basename: string.isRequired,\n  theme: string.isRequired,\n  toggleTheme: func.isRequired\n}\n\nexport default NavigationBar;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport './App.css';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport { Container } from 'react-bootstrap';\nimport { ThemeProvider } from 'styled-components';\nimport { GlobalStyles } from './components/Globalstyle';\nimport { lightTheme, darkTheme } from './components/Themes';\nimport Dashboard from './components/Dashboard';\nimport { About } from './components/About';\nimport NavigationBar from './components/NavigationBar';\nimport { useDarkMode } from './components/useDarkMode';\n\nconst BASENAME = \"/covid19dashboard\";\n\nfunction App() {\n  const [theme, themeToggler, mountedComponent] = useDarkMode();\n\n  if(!mountedComponent)\n    return <div/>;\n\n  return (\n    <ThemeProvider theme={theme === 'light' ? lightTheme : darkTheme}>\n      <>\n        <GlobalStyles />\n        <div className=\"App\">\n          <Router basename={BASENAME}>\n            <NavigationBar basename={BASENAME} theme={theme} toggleTheme={themeToggler} />\n            <Container>\n              <Switch>\n                <Route exact path='/'>\n                  <Dashboard theme={theme} />\n                </Route>\n                <Route path='/about'>\n                  <About theme={theme} />\n                </Route>\n              </Switch>\n            </Container>\n          </Router>\n        </div>\n      </>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import { useEffect, useState } from \"react\";\n\nexport const useDarkMode = () => {\n  const [theme, setTheme] = useState(\"light\");\n  const [mountedComponent, setMountedComponent] = useState(false);\n\n  const setMode = (mode) => {\n    window.localStorage.setItem(\"theme\", mode);\n    setTheme(mode);\n  };\n\n  const themeToggler = () => {\n    theme === \"light\" ? setMode(\"dark\") : setMode(\"light\");\n  };\n\n  useEffect(() => {\n    const localTheme = window.localStorage.getItem(\"theme\");\n    localTheme ? setTheme(localTheme) : setMode(\"light\");\n    setMountedComponent(true);\n  }, []);\n\n  return [theme, themeToggler, mountedComponent];\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}