{"version":3,"sources":["components/Globalstyle.js","components/Themes.js","components/Dashboard.jsx","components/About.jsx","components/NavigationBar.jsx","App.js","components/useDarkMode.js","reportWebVitals.js","index.js"],"names":["GlobalStyles","createGlobalStyle","theme","body","text","lightTheme","toggleBorder","backround","darkTheme","BASE_URL","defaultCountry","categoryColor","cases","deaths","recovered","Dashboard","props","useState","error","setError","isLoaded","setIsLoaded","countries","setCountries","selectedCountry","setSelectedCountry","undefined","countryData","setCountryData","fetchCountryData","country","fetch","headers","then","res","json","result","timeline","countryDataFormatted","Object","entries","category","values","cat","name","data","date","number","push","e","useEffect","forEach","d","Set","Form","className","Group","as","Row","controlId","Label","column","sm","Col","Control","custom","value","defaultValue","onChange","target","style","backgroundColor","color","borderColor","map","idx","width","height","margin","left","right","formatter","Intl","NumberFormat","format","dataKey","allowDuplicatedCategory","type","tickFormatter","c","stroke","Alert","variant","Heading","About","NavigationBar","basename","toggleTheme","Navbar","id","collapseOnSelect","sticky","expand","bg","Brand","href","src","alt","Toggle","aria-controls","Collapse","Nav","Link","inline","Button","onClick","BASENAME","App","setTheme","mountedComponent","setMountedComponent","setMode","mode","window","localStorage","setItem","localTheme","getItem","useDarkMode","themeToggler","Container","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dac8aeae.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyles = createGlobalStyle`\n  body {\n    background: ${({ theme }) => theme.body};\n    color: ${({ theme }) => theme.text};\n  }\n  `\n\n  /*font-family: Tahoma, Helvetica, Arial, Roboto, sans-serif;\n  transition: all 0.50s linear;*/\n","export const lightTheme = {\n  body: '#FFF',\n  text: '#101010',\n  toggleBorder: '#FFF',\n  backround: '#363537'\n}\n\nexport const darkTheme = {\n  body: '#121212', //'#363537',\n  text: '#FAFAFA',\n  toggleBorder: '#6B8096',\n  backround: '#363537'\n}\n","import React, { useState, useEffect } from 'react';\nimport { Alert, Form, Col } from 'react-bootstrap';\nimport { LineChart, ResponsiveContainer, XAxis, YAxis, Tooltip, Line, Legend } from 'recharts'\nimport './Dashboard.css';\nimport {darkTheme} from './Themes';\n\nconst BASE_URL = 'https://disease.sh';\nconst defaultCountry = 'Italy';\nconst categoryColor = {\n  cases: \"#FF0000\",\n  deaths: \"#252525\",\n  recovered: \"#62FF00\"\n}\n\nfunction Dashboard(props) {\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [countries, setCountries] = useState({});\n  const [selectedCountry, setSelectedCountry] = useState(defaultCountry);\n  const [countryData, setCountryData] = useState(undefined);\n\n\n  useEffect(() => {\n    if (!isLoaded) {\n      fetch(`${BASE_URL}/v3/covid-19/historical?lastdays=1`, {\n        headers: {\n          'accept': 'application/json',\n        }\n      })\n        .then(res => res.json())\n        .then(\n          (result) => {\n            let countries = { countries: [] };\n            result.forEach(d => {\n              countries.countries.push(d.country);\n            });\n            countries.countries = [...new Set(countries.countries)];\n            setIsLoaded(true);\n            setError(error);\n            setCountries(countries);\n            setSelectedCountry(countries[0]);\n            fetchCountryData(countries[0]);\n          },\n          (e) => {\n            setIsLoaded(true);\n            setError(e);\n          }\n        )\n    }\n  }, []);\n\n  function fetchCountryData(country) {\n    fetch(`${BASE_URL}/v3/covid-19/historical/${country}?lastdays=30`, {\n      headers: {\n        'accept': 'application/json'\n      }\n    })\n      .then(res => res.json())\n      .then(\n        (result) => {\n          if (result.timeline &&\n            result.timeline.cases &&\n            result.timeline.deaths &&\n            result.timeline.recovered) {\n\n            let countryDataFormatted = [];\n            for (let [category, values] of Object.entries(result.timeline)) {\n              let cat = { name: category, data: [] };\n              for (let [date, number] of Object.entries(values)) {\n                cat.data.push({\n                  date: date,\n                  number: number\n                });\n              }\n              countryDataFormatted.push(cat);\n            }\n            setCountryData(countryDataFormatted);\n          }\n          else {\n            setError(\"Bad format response.\");\n          }\n        },\n        (e) => {\n          setError(e);\n        }\n      )\n  }\n\n\n  if (!isLoaded || !countryData) {\n    selectedCountry && fetchCountryData(selectedCountry);\n    return (\n      <>\n        <Alert variant=\"light\">\n          <Alert.Heading>I'm loading the data</Alert.Heading>\n          <p>Please be patient...</p>\n        </Alert>\n      </>\n    )\n  } else {\n    return (\n      <>\n        <Form className='mt-3'>\n          <Form.Group as={Form.Row} controlId=\"country\">\n            <Form.Label column sm={4} >Selected Country</Form.Label>\n            <Col sm={6}>\n              <Form.Control\n                as=\"select\"\n                custom\n                value={selectedCountry}\n                defaultValue={defaultCountry}\n                onChange={e => {\n                  if (e.target.value) {\n                    setSelectedCountry(e.target.value);\n                    fetchCountryData(e.target.value);\n                  }\n                }}\n                style={\n                  props.theme === 'light' ? {} : {\n                    backgroundColor: darkTheme.backround,\n                    color: darkTheme.text,\n                    borderColor: 'gray'\n                    }\n                }\n              >\n                {countries && countries.countries &&\n                  countries.countries.map((country, idx) => {\n                    return (<option value={country}>{country}</option>)\n                  })}\n              </Form.Control>\n            </Col>\n          </Form.Group>\n        </Form>\n        <ResponsiveContainer width='100%' height={500} >\n          <LineChart margin={{ left: 25, right: 4 }}>\n            <Tooltip formatter={(value) => new Intl.NumberFormat('it').format(value)} />\n            <XAxis dataKey=\"date\" allowDuplicatedCategory={false}></XAxis>\n            <YAxis type=\"number\" dataKey=\"number\" tickFormatter={(value) => new Intl.NumberFormat('it').format(value)} ></YAxis>\n            <Legend />\n            {countryData && countryData.map(c => (\n              <Line type='monotone' dataKey=\"number\" data={c.data} name={c.name} key={c.name} stroke={categoryColor[c.name]} />\n            ))}\n          </LineChart>\n        </ResponsiveContainer>\n      </>\n    );\n  }\n}\n\nexport default Dashboard;\n","import React from 'react';\nimport './About.css';\n\nexport const About = () => (\n  <>\n    <h1>About</h1>\n    <h2>\n      Covid 19 Dashboard\n    </h2>\n    <p>\n      See the current Covid 19 situation.\n    </p>\n    <h3>Whoami</h3>\n    <p>My name is Lorenzo Felletti and I'm a computer engineering student ad the University of Bologna.</p>\n  </>\n)\n\nexport default About;\n","import React from 'react';\nimport { Navbar, Nav, Button, Form } from 'react-bootstrap';\nimport { func, string } from 'prop-types';\nimport styled from 'styled-components';\n//import { lightNavbarTheme, darkNavbarTheme } from './Themes'\nimport './NavigationBar.css';\n\n/**\n * The application Navigation Bar.\n * It is based on the react-bootstrap NavBar component.\n */\nconst NavigationBar = ({ basename, theme, toggleTheme }) => {\n\n  return (\n    <Navbar id=\"navigation-bar\" collapseOnSelect sticky=\"top\" expand=\"lg\" bg={theme} variant={theme}>\n      <Navbar.Brand href={`${basename}`}>\n        <img\n          src={`${basename}/logo.gif`}\n          width=\"120\"\n          height=\"40\"\n          className=\"d-inline-block align-top\"\n          alt=\"covid19dashboard\"\n        />\n      </Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n      <Navbar.Collapse id=\"responsive-navbar-nav\">\n        <Nav className=\"mr-auto\">\n          <Nav.Link href={`${basename}`}>Dashboard</Nav.Link>\n          <Nav.Link href={`${basename}/#/about`}>About</Nav.Link>\n        </Nav>\n        <Form inline>\n          <Button variant={(theme === 'light') ? 'dark' : 'light'} onClick={toggleTheme}>\n            Switch Theme\n          </Button>\n        </Form>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n}\n\nNavigationBar.propTypes = {\n  basename: string.isRequired,\n  theme: string.isRequired,\n  toggleTheme: func.isRequired\n}\n\nexport default NavigationBar;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport { Container } from 'react-bootstrap';\nimport { ThemeProvider } from 'styled-components';\nimport { GlobalStyles } from './components/Globalstyle';\nimport { lightTheme, darkTheme } from './components/Themes';\nimport Dashboard from './components/Dashboard';\nimport { About } from './components/About';\nimport NavigationBar from './components/NavigationBar';\nimport { useDarkMode } from './components/useDarkMode';\n\nconst BASENAME = \"/covid19dashboard\";\n\nfunction App() {\n  const [theme, themeToggler, mountedComponent] = useDarkMode();\n\n\n  /*useEffect(() => {\n  }, [])*/\n\n  if(!mountedComponent)\n    return <div/>;\n\n  return (\n    <ThemeProvider theme={theme === 'light' ? lightTheme : darkTheme}>\n      <>\n        <GlobalStyles />\n        <div className=\"App\">\n          <Router basename={BASENAME}>\n            <NavigationBar basename={BASENAME} theme={theme} toggleTheme={themeToggler} />\n            <Container>\n              <Switch>\n                <Route exact path='/'>\n                  <Dashboard theme={theme} />\n                </Route>\n                <Route path='/about'>\n                  <About theme={theme} />\n                </Route>\n              </Switch>\n            </Container>\n          </Router>\n        </div>\n      </>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import { useEffect, useState } from 'react';\n\nexport const useDarkMode = () => {\n  const [theme, setTheme] = useState('light');\n  const [mountedComponent, setMountedComponent] = useState(false)\n\n  const setMode = mode => {\n    window.localStorage.setItem('theme', mode)\n    setTheme(mode)\n  };\n\n  const themeToggler = () => {\n    theme === 'light' ? setMode('dark') : setMode('light')\n  };\n\n  useEffect(() => {\n    const localTheme = window.localStorage.getItem('theme');\n    localTheme ? setTheme(localTheme) : setMode('light')\n    setMountedComponent(true)\n  }, []);\n\n  return [theme, themeToggler, mountedComponent]\n};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}